import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

df = pd.read_csv("maharashtra_irrigation_dataset_with_outcome.csv")

df.isnull().sum()        #check for null values
df.shape       #print number of rows and columns
df.head()

#Random forest algorithm
# Encode categorical variables
df_encoded = df.copy()
label_encoders = {}

for column in df_encoded.select_dtypes(include=['object']).columns:
    le = LabelEncoder()
    df_encoded[column] = le.fit_transform(df_encoded[column])
    label_encoders[column] = le

# Define features and target
X = df_encoded.drop('Outcome', axis=1)
y = df_encoded['Outcome']

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

y_predict = rf.predict(X_test)

from sklearn.metrics import confusion_matrix
confusion_matrix = confusion_matrix(y_test,y_predict)
print(confusion_matrix)
from sklearn.metrics import classification_report
print(classification_report(y_test,y_predict))

# Get and plot feature importances
importances = rf.feature_importances_
feature_names = X.columns

feature_importance_df = pd.DataFrame({
    'Feature': feature_names,
    'Importance': importances
}).sort_values(by='Importance', ascending=False)

#plot
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_df['Feature'], feature_importance_df['Importance'])
plt.xlabel("Feature Importance")
plt.title("Top Features by Random Forest")
plt.gca().invert_yaxis()
plt.tight_layout()
plt.show()

# Define features and target
X = df[['Humidity (%)', 'Temperature (Â°C)', 'Soil Moisture (%)']]
y = df["Outcome"]
# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

y_predict = rf.predict(X_test)

from sklearn.metrics import confusion_matrix
confusion_matrix = confusion_matrix(y_test,y_predict)
print(confusion_matrix)

from sklearn.metrics import classification_report
print(classification_report(y_test,y_predict))
