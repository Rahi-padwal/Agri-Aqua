import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

df = pd.read_csv("maharashtra_irrigation_dataset_with_outcome.csv")

df.isnull().sum()        #check for null values
df.shape       #print number of rows and columns
df.head()

#Decision tree
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import confusion_matrix, accuracy_score
import matplotlib.pyplot as plt

# Load dataset
df = pd.read_csv("maharashtra_irrigation_dataset_with_outcome.csv")

# Drop non-numeric or irrelevant columns
df = df.drop(columns=['Location','Date','Growth Stage', 'Crop','Precipitation (mm)','Irrigation Applied (mm)', 'Solar Radiation (W/mÂ²)', 'Wind Speed (m/s)'])
# Drop any rows with missing values (optional)
df = df.dropna()

# Split data into features and target
X = df.drop(columns=["Outcome"])
y = df["Outcome"]

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Train decision tree
clf = DecisionTreeClassifier(random_state=42)
clf.fit(X_train, y_train)

# Predictions
y_pred = clf.predict(X_test)

print(y_pred)

# Confusion matrix and accuracy
conf_matrix = confusion_matrix(y_test, y_pred)
accuracy = accuracy_score(y_test, y_pred)

print("Confusion Matrix:")
print(conf_matrix)


from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))

# Plot decision tree
plt.figure(figsize=(20, 10))
plot_tree(clf, feature_names=X.columns, class_names=["0", "1"], filled=True)
plt.title("Decision Tree")
plt.show()

classifier = DecisionTreeClassifier(criterion='entropy',max_depth=3)
classifier = classifier.fit(X_train,y_train)
y_pred = classifier.predict(X_test)
from sklearn import metrics
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

from sklearn.tree import export_graphviz
!pip install six

from six import StringIO
from IPython.display import Image
import pydotplus

# Get all feature names from your training data (X_nb)
f_c = X.columns

# Now, f_c contains all 22 feature names

data = StringIO()
export_graphviz(classifier, out_file=data,
                filled=True, rounded=True,
                special_characters=True, feature_names=f_c, class_names=['0', '1'])
graph = pydotplus.graph_from_dot_data(data.getvalue())
Image(graph.create_png())
